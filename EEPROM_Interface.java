/**
 *
 * Rick Faszold
 */

package my.Viewer;

import java.util.logging.Level;
import java.util.logging.Logger;

public class EEPROM_Interface extends javax.swing.JDialog {

    private final static Logger LOGGER = Logger.getLogger(EEPROM_Interface.class.getName());
    
    private UDP_Communications UDP_Comm = null;
            
    private String strEEPROM_Setup_Element_Array[];
    
    /**
     * Creates new form EEPROM_Interface
     * @param parent
     * @param modal
     */
    public EEPROM_Interface(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    private String Format_Incoming_String(String strData) {

        String strTemp = strData + "\n";  // this will stop it.
        String strReturn = "";
        
        for(char c : strTemp.toCharArray()) {
            if ((c >= 32) && (c <= 127)) {
                strReturn += c;
            } else {
                break;
            }
        }        
        
        return strReturn;
    }
    
    public void Show_Data(String strData) {

        String strTemp = strData + ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,";  
        String strSingleElement;
        
        strEEPROM_Setup_Element_Array = strTemp.split(",");

        //strTemp = "Show_Data() Processing ->" + strData + "<-";
        //LOGGER.log(Level.SEVERE, strTemp);
        
        int iElementCount = strEEPROM_Setup_Element_Array.length;
        
        for (int iIndex = 1; iIndex < iElementCount; iIndex++) {
            strSingleElement = Format_Incoming_String(strEEPROM_Setup_Element_Array[iIndex]);
            
            // if the item to add is empty, the item will not append.  This is needed for blank lines.
            // an empty filed denotes a blank line...
            if (strSingleElement.isEmpty()) {
                strSingleElement = "  ";
            }  
            
            //strTemp = "->" + strSingleElement + "<-";
            
            List_EEPROM_Display.append(strSingleElement + "\n");
        }
    }

    public void setUDPCommunications(UDP_Communications UDP_Comm) {
        // now we can send commands to the board...!
        this.UDP_Comm = UDP_Comm;
    }

    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        List_EEPROM_Display = new javax.swing.JTextArea();
        Text_Command = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        List_EEPROM_Display.setColumns(20);
        List_EEPROM_Display.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        List_EEPROM_Display.setRows(5);
        List_EEPROM_Display.setFocusable(false);
        jScrollPane1.setViewportView(List_EEPROM_Display);

        Text_Command.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Text_CommandActionPerformed(evt);
            }
        });

        jLabel1.setText("Command:");

        jLabel2.setText("Hit \"?\" <enter> for menu options");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(Text_Command))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Text_Command, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Text_CommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Text_CommandActionPerformed
        // TODO add your handling code here:
        
        String strCommand = "COMMAND " + Text_Command.getText() + "\n";
        
        boolean b = UDP_Comm.UDP_Send_Packet(strCommand);

        Text_Command.setText("");
    }//GEN-LAST:event_Text_CommandActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EEPROM_Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EEPROM_Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EEPROM_Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EEPROM_Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                EEPROM_Interface dialog = new EEPROM_Interface(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea List_EEPROM_Display;
    private javax.swing.JTextField Text_Command;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
